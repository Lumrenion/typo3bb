<?php
namespace LumIT\Typo3bb\Domain\Repository;


/***************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2016 Philipp SeÃŸner <philipp.sessner@gmail.com>
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/


use LumIT\Typo3bb\Utility\PluginUtility;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Core\Utility\StringUtility;
use TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings;
use TYPO3\CMS\Extbase\Persistence\QueryInterface;
use TYPO3\CMS\Extbase\Persistence\Repository;

/**
 * The abstract repository
 */
abstract class AbstractRepository extends Repository {
    /**
     * @param Typo3QuerySettings $defaultQuerySettings
     */
    public function setStoragePageIdsFromPluginSettings($defaultQuerySettings = null) {
        if($this->defaultQuerySettings == null) {
            if($defaultQuerySettings instanceof  Typo3QuerySettings) {
                $this->setDefaultQuerySettings($defaultQuerySettings);
            } else {
                $this->setDefaultQuerySettings($this->objectManager->get(Typo3QuerySettings::class));
            }
        }
        $this->defaultQuerySettings->setStoragePageIds(GeneralUtility::intExplode(',', PluginUtility::_getPluginConfiguration()['persistence']['storagePid']));
    }

    /**
     * Extends magic method by adding findOrderedBy${propertyName}${ASC|DESC}
     *
     * @param string $methodName
     * @param string $arguments
     * @return array|mixed|\TYPO3\CMS\Extbase\Persistence\QueryResultInterface
     */
    public function __call($methodName, $arguments) {
        if (substr($methodName, 0, 13) === 'findOrderedBy' && strlen($methodName) > 14) {
            $propertyName = lcfirst(substr($methodName, 13));
            if (StringUtility::endsWith($propertyName, 'ASC')) {
                $propertyName = substr($propertyName, 0, -3);
                $ordering = QueryInterface::ORDER_ASCENDING;
            } elseif (StringUtility::endsWith($propertyName, 'DESC')) {
                $propertyName = substr($propertyName, 0,  -4);
                $ordering = QueryInterface::ORDER_DESCENDING;
            } else {
                $ordering = null;
            }

            if ($ordering != null) {
                $query = $this->createQuery();
                $query->setOrderings([lcfirst($propertyName) => $ordering]);
                if ($arguments[0] > 0) {
                    $query->setLimit($arguments[0]);
                }
                return $query->execute();
            }
        }

        if (substr($methodName, 0, 7) === 'findMax' && strlen($methodName) > 8) {
            $propertyName = lcfirst(substr($methodName, 7));
            $query = $this->createQuery();
            $query->setOrderings([
                $propertyName => QueryInterface::ORDER_DESCENDING
            ]);
            $query->setLimit(1);

            $result = $query->execute()->getFirst();
            return $result;
        }

        return parent::__call($methodName, $arguments); // TODO: Change the autogenerated stub
    }
}